Переменная VAR относится к глобальным переменнам
           let относится к локальным

    Типы примитивов: string(let str = 'Maria'),
number
(let num = 42;
let floatNum = 3.14;), 
                   
BigInt - Целые числа произвольной точности
(let bigInt = 1234567890123456789012345678901234567890n;), 

boolean(let isTrue = true;
let isFalse = false;), 

symbol - Уникальные и неизменяемые примитивы, часто используемые в качестве ключей объектов.
(let sym = Symbol('description');), 

null (let nullValue = null), 

undefined - Переменная, которая была объявлена, но не инициализирована
(let undef;
console.log(undef); // undefined
)


Объектные типы
Объектные типы данных включают:

Object: Основной тип для создания объектов.


let obj = { key: "value" };
Array: Специальный тип объекта для хранения упорядоченных коллекций данных.


let arr = [1, 2, 3];
Function: Объекты, которые могут быть вызваны как функции.


function greet() {
    console.log("Hello!");
}
Date: Объекты для работы с датами и временем.


let date = new Date();
RegExp: Объекты для работы с регулярными выражениями.


let regex = /abc/;
Map и Set: Коллекции для хранения пар ключ-значение и уникальных значений соответственно.


let map = new Map();
let set = new Set();


Различия между примитивными типами и объектными типами
Примитивные типы: Это неизменяемые значения, которые хранятся непосредственно в переменной. При копировании примитивного значения создается новая копия.


let a = 5;
let b = a;
b = 10;
console.log(a); // 5
Объектные типы: Это изменяемые значения, которые хранятся в виде ссылок на объекты. При копировании объекта копируется ссылка, а не сам объект.


let obj1 = { key: "value" };
let obj2 = obj1;
obj2.key = "new value";
console.log(obj1.key); // "new value"


------------Логические операции-----------------------
'И' (&&)
let x = 1
let y = 2
let z = 3
console.log(x<y && y<z);

'ИЛИ'(||)
let x = 1
let y = 2
let z = 3
console.log(x<y || y<z);

'НЕ'(!)
let x = false;
console.log(!x);


for in получает имена свойств(ключи), но не значения свойств 
for of получает значения свойств, а не ключи
                                        ------функци-----------
function name(){
    //содержимое функции
}
чтобы вызвать:
name();
